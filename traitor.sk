options:
    join: "[&bbackstabber&f] &aYou joined the game"
    full: "[&bbackstabber&f] &cGame is full"
    running: "[&bbackstabber&f] &cGame is running, please wait"
    already: "[&bbackstabber&f] &cYou are already in a game"
    leave: "[&bbackstabber&f] &aYou left the game"
    trapdeny: "[&bbackstabber&f] &cYou are not a backstabber"
    kick: "[&bbackstabber&f] &cYour karma is too low!"
    rdm: "&c-10 Karma for RDM. If it gets too low, you will be banned!"
    lowkarma: "[&bbackstabber&f] &cYou have been weakened due to low karma. Inferno swords and your hand will not do any damage"
    dead: send "[&bbackstabber&f] &cYou can't talk when you're dead!"
    fool: send "[&bbackstabber&f] &aYou fooled them!"

    innocent: set action bar of {back.innocents::*} to "You are &ainnocent&f. Find the backstabbers before it's too late!"
    traitor: set action bar of {back.traitors::*} to "You are a &cbackstabber&f. Kill all innocents to win!"
    death: "&6You died!"
    cancel: "[&bbackstabber&f] &6Game cancelled"

    victory-i: send {back.players::*} title "&aInnocents&f win!"
    victory-t: send {back.players::*} title "&cBackstabbers&f win!"

    noperm: "[&bbackstabber&f] &4You don't have permission"
    newlocation: "[&bbackstabber&f] &9Location added"
    clearlocations: "[&bbackstabber&f] &9All locations removed"
    locationscomplete: "[&bbackstabber&f] &6All required locations added. You can stop now..."
    cmdusage: "&b&loptions:&r &aaddLocation&r, &aclearMapLocations&r, &aclearAllLocations&r, &agetWeapons&r"
    pos1: "[&bbackstabber&f] &9Position 1 set"
    pos2: "[&bbackstabber&f] &9Position 2 set"
    region-saved: "[&bbackstabber&f] &9Region generated and saved"
    nopos: "[&bbackstabber&f] &4All positions have not been set"
    noreg: "[&bbackstabber&f] &4ERROR: Region has not been set!"

    traitoritem: diamond named "&dSecret Items" 
    nomoney: "[&bbackstabber&f] &cYou don't have any tokens left"
    2weapons: "[&bbackstabber&f] &cYou already have a secret item equipped"
    trapdeny: "[&bbackstabber&f] &cYou are not a backstabber"
    2compass: "[&bbackstabber&f] &cYou have already bought a tracker"

    n-join: "ui.button.click"
    n-leave: "ui.button.click"
    n-innocent: "entity.player.levelup"
    n-traitor: "entity.elder_guardian.curse"
    n-detective: "block.brewing_stand.brew" # not yet used
    n-die: "entity.blaze.death"
    n-win: "ui.toast.challenge_complete"
    n-timer: "block.note_block.pling"
    n-map: "entity.arrow.hit_player"
    n-scan: "block.beacon.ambient"
    n-beep: "block.note_block.pling"

on load:
    clear {back.weapons::*}
    clear {back.ammo::*}
    clear {back.tw::*}
    set {back.running} to false
    set {back.endgame} to false
    clear {back.players::*}
    clear {back.traitors::*}
    clear {back.innocents::*}
    clear {back.naughty::*}
    clear {back.map-vote::*}

    clear {back.maps::*}
    set {back.maps::Depot} to "Back-Depot"
    set {back.maps::Castle} to "Back-Castle"
    set {back.maps::Pyramid} to "Back-Egyptian"
    set {back.maps::Apocalypse} to "Back-Old"
    set {back.maps::Hogwarts} to "Back-Hog"
    set {back.maps::Valley} to "Back-Valley"
    delete {back.map}

    clear {back.time::*}
    set {back.time::Back-Depot} to 360 
    set {back.time::Back-Castle} to 360
    set {back.time::Back-Egyptian} to 360
    set {back.time::Back-Old} to 360
    set {back.time::Back-Hog} to 480   
    set {back.time::Back-Valley} to 360

    set {_bat} to a stick of knockback 2 and sharpness 1
    set name of {_bat} to "&bBat"
    add {_bat} to {back.weapons::*}

    set {_sword1} to an iron sword
    set name of {_sword1} to "&bBlunt Sword"
    add {_sword1} to {back.weapons::*}

    set {_sword2} to an iron sword of sharpness 1
    set name of {_sword2} to "&bFine Blade"
    add {_sword2} to {back.weapons::*}

    set {_sword3} to an iron sword of sharpness 2
    set name of {_sword3} to "&bSharp Sword"
    add {_sword3} to {back.weapons::*}

    set {_flame} to a gold sword of fire aspect 2
    set name of {_flame} to "&bInferno Blade"
    add {_flame} to {back.weapons::*}

    set {_bow1} to a bow
    set name of {_bow1} to "&bPistol"
    add {_bow1} to {back.weapons::*}

    set {_bow2} to a bow of power 1
    set name of {_bow2} to "&bHuntsman Rifle"
    add {_bow2} to {back.weapons::*}

    set {_bow3} to a bow of power 2
    set name of {_bow3} to "&bMarksman Rifle"
    add {_bow3} to {back.weapons::*}

    set {_crossbow} to a crossbow of multishot 1 and power 1
    set name of {_crossbow} to "&bShotgun"
    add {_crossbow} to {back.weapons::*}

    set {_heavy} to a crossbow of multishot 1 and power 2
    set name of {_heavy} to "&bHeavy Shotgun"
    add {_heavy} to {back.weapons::*}

    set {_arrow} to an arrow
    add {_arrow} to {back.ammo::*}

    set {_knife} to a diamond sword
    set line 1 of lore of {_knife} to "1x use"
    set line 2 of lore of {_knife} to "Instant kill"
    set durability of {_knife} to 1560
    set name of {_knife} to "&dBackstabber"
    add {_knife} to {back.tw::*}

    set {_trident} to a trident of loyalty 3
    set name of {_trident} to "&dTrident"
    set line 1 of lore of {_trident} to "Limited use"
    set durability of {_trident} to 240
    add {_trident} to {back.tw::*}

    set {_boomer} to blaze powder
    set name of {_boomer} to "&dBoomer"
    set line 1 of lore of {_boomer} to "Creates an explosion"
    set line 2 of lore of {_boomer} to "1 second after detonation"
    add {_boomer} to {back.tw::*}

    set {_radar} to a compass named "&9Tracker"
    set line 1 of lore of {_radar} to "Directs you to the nearest innocent"
    add {_radar} to {back.tw::*}

# Joining
on rightclick on sign:
    
    if 1st line of clicked block is "[backstabber]":

        set 1st line of clicked block to "&f[&bbackstabber&f]"

    if 1st line of clicked block is "&f[&bbackstabber&f]":

        if {back.karma::%player%} is not set:
            set {back.karma::%player%} to 100
        if {back.karma::%player%} > 0:
            if size of {back.players::*} < 8: 
                if {back.running} is not true:
                    if {back.players::*} does not contain player:

                        if {back.map} is not set:
                            set {back.map} to countVotes() parsed as world
                        joinGame(player, {back.map})

                    else:
                        send {@already}
                else:
                    send {@running}
            else:
                send {@full}
        else:
            send {@kick}

function joinLobby(p:player):

    send "DEBUG: YOU JOINED THE LOBBY" to {_p}

function joinGame(p:player, w:world):

    add {_p} to {back.players::*}
    set {back.%{_p}%.role} to "None"

    set {back.%{_p}%.old-loc} to {_p}'s location
    set {_len} to size of {back.players::*}

    set {_loc} to {back.spawns::%{_w}%::%{_len}%}
    teleport {_p} to {_loc}

    if {back.karma::%{_p}%} <= 50:
        apply potion of weakness of tier 1 without any particles to {_p} for 100000 seconds
        send {@lowkarma} to {_p}

    set {_p}'s gamemode to survival
    apply potion of saturation of tier 2 without any particles to {_p} for 100000 seconds
    heal {_p}
    clear {_p}'s inventory
    set slot 8 of {_p}'s inventory to a slime ball named "&cLeave"

    clear scoreboard of {_p}
    set the display name of tab of {_p} for all players to "&r&7%{_p}%"
    updateBoard()
    toggle scoreboard of {_p} on
    noise("map", {_p})

    send {@join} to {_p}

# Leaving
on rightclick holding slime ball:
    if {back.players::*} contains player:
        noise("leave", player)
        leaveGame(player)

every 20 ticks:

    if size of {back.players::*} > 1:
        
        if {back.running} is false:

            if {back.timer} > 0:
                subtract 1 from {back.timer}
                updateBoard()

                if {back.timer} < 1:
                    startGame()
                    
                else if {back.timer} <= 3:
                    noise("timer", {back.players::*})
        
        else if {back.running} is true:
            
            if {back.timer} > 0:
                subtract 1 from {back.timer}
                updateBoard()

                if {back.timer} < 1:
                    {@victory-i}
                    set {_win} to (1 * (size of {back.players::*}))
                    add {_win} to balance of {back.innocents::*}
                    send "[&bbackstabber&f] &aYou only earned &fâ‚´%{_win}%&a as you failed to identify the backstabber(s)" to {back.innocents::*}
                    loop {back.innocents::*}:
                        add {_win} to {back.stats.money.%loop-value%}
                    endGame()

on death:

    if {back.players::*} contains player:
        
        cancel event

        add 1 to {back.stats.deaths.%player%}
        add 1 to {back.stats.kills.%attacker%}

        if {back.innocents::*} contains attacker:
            if {back.naughty::*} does not contain player:
                if {back.innocents::*} contains player:
                    naughty(attacker)

        noise("die", player)
        set player's gamemode to spectator
        set the display name of tab of player for all players to "&r&f%player%"
        send player title {@death}
        remove player from {back.innocents::*}

        if damage cause is a block explosion:
            if {back.traitors::*} contains player:
                if size of {back.traitors::*} < 2:
                    stop
            loop {back.traitors::*}:
                if {_t} is not set:
                    set {_t} to loop-value
                if (distance between player and loop-value) < (distance between player and {_t}):
                    set {_t} to loop-value
            add 1 to {back.stats.kills.%{_t}%}

        remove player from {back.traitors::*}

        if {back.endgame} is not true:
            wait 1 second
            if size of {back.innocents::*} < 1:
                set {back.endgame} to true
                {@victory-t}
                set {_win} to (100 * (size of {back.players::*}))
                add {_win} to balance of {back.traitors::*}
                send "[&bbackstabber&f] &aYou earned â‚´%{_win}% for winning as traitor" to {back.traitors::*}
                loop {back.traitors::*}:
                    add {_win} to {back.stats.money.%loop-value%}
                noise("win", {back.players::*})
                wait 4 seconds
                endGame() 
            else if size of {back.traitors::*} < 1:
                set {back.endgame} to true
                {@victory-i}
                set {_win} to (50 * (size of {back.players::*}))
                add {_win} to balance of {back.innocents::*}
                send "[&bbackstabber&f] &aYou earned â‚´%{_win}% for winning as innocent" to {back.innocents::*}
                loop {back.innocents::*}:
                    add {_win} to {back.stats.money.%loop-value%}
                noise("win", {back.players::*})
                wait 4 seconds
                endGame()

on damage:

    if {back.players::*} contains player:
        if {back.running} is not true:
            cancel event
        else if {back.running} is true:

            if {back.innocents::*} contains player:
                if {back.naughty::*} does not contain player:
                    if {back.innocents::*} contains attacker:

                        add attacker to {back.naughty::*}

on quit:

    if {back.players::*} contains player:
        leaveGame(player)

function endGame():
    
    set {back.running} to false
    set {back.endgame} to false
    set {_loop::*} to {back.players::*}
    loop {_loop::*}:
        set {_player} to {_loop::%loop-index%}
        if {back.innocents::*} contains {_player}:
            add 1 to {back.stats.wins.%loop-value%}
        if {back.traitors::*} contains {_player}:
            add 1 to {back.stats.wins.%loop-value%}
        add 1 to {back.stats.games.%loop-value%}
        if {back.naughty::*} does not contain {_player}:
            if {back.karma::%{_player}%} < 99:
                add 2 to {back.karma::%{_player}%}
            else:
                set {back.karma::%{_player}%} to 100
        leaveGame({_player})
    loadChests()
    delete {back.map}

function startGame():
    
    clear {back.traitors::*}
    clear {back.innocents::*}
    clear {back.naughty::*}
    set {back.running} to true
    set {back.timer} to {back.time::%{back.map}%}
    loop {back.players::*}:
        set {_i} to {back.players::%loop-index%}
        set {back.%{_i}%.role} to "&aInnocent"
        add {_i} to {back.innocents::*}

    set {_t-num} to 1
    set {_len} to size of {back.players::*}
    if {_len} > 5: 
        add 1 to {_t-num}
    if {_len} > 9:
        add 1 to {_t-num}

    loop {_t-num} times:
        set {_inno::*} to {back.innocents::*}
        set {_traitor-index} to a random integer between 1 and size of {_inno::*}

        set {_t} to {_inno::%{_traitor-index}%}
        set {back.%{_t}%.role} to "&cBackstabber"
        remove {_t} from {back.innocents::*}
        add {_t} to {back.traitors::*}
        
    {@innocent}
    {@traitor}
    if size of {back.traitors::*} > 1:
        send "[&bbackstabber&f] Backstabbers: %{back.traitors::*}%" to {back.traitors::*}
        send "[&bbackstabber&f] Use /bchat <message> to talk to your fellow backstabbers secretly" to {back.traitors::*}
    send "[&bbackstabber&f] Use /bmenu or the diamond to access the menu of secret weaopons" to {back.traitors::*}
    
    loop {back.traitors::*}:
        set {_t} to {back.traitors::%loop-index%}
        set {back.money.%{_t}%} to 2
        set slot 7 of {_t}'s inventory to {@traitoritem}

    updateBoard()

    noise("start", {back.players::*})

function debug():

    broadcast "Naughty: %{back.naughty::*}%"
    # broadcast "Players: %{back.players::*}% (%size of {back.players::*}%)"
    # broadcast "Innocents: %{back.innocents::*}% (%size of {back.innocents::*}%)"
    # broadcast "Traitors: %{back.traitors::*}% (%size of {back.traitors::*}%)"
    
function leaveGame(p:player):

    toggle scoreboard of {_p} off
    set action bar of {_p} to ""
    remove saturation from {_p}
    remove weakness from {_p}
    extinguish {_p}
    heal {_p}
    clear {_p}'s inventory
    set gamemode of {_p} to survival
    remove {_p} from {back.naughty::*}
    remove {_p} from {back.players::*}
    remove {_p} from {back.innocents::*}
    remove {_p} from {back.traitors::*}
    set {back.%{_p}%.role} to "None"
    teleport {_p} to {back.%{_p}%.old-loc}
    send {@leave} to {_p}
    set the display name of tab of {_p} for all players to "&r&f%{_p}%"
    if {back.running} is true:
        if (size of {back.traitors::*}) <= 0:
            send {@cancel} to {back.players::*}
            endGame()
            remove 5 from {back.karma::%{_p}%}
        if (size of {back.innocents::*}) <= 0:
            send {@cancel} to {back.players::*}
            endGame()
            remove 5 from {back.karma::%{_p}%}
    if size of {back.players::*} < 2:
        # Game ends
        set {back.running} to false
        set {back.timer} to 20
        loop {back.players::*}:
            set {back.%loop-value%.role} to "None"
        if size of {back.players::*} < 1:
            loadChests()
            delete {back.map}
    

function updateBoard():

    loop {back.players::*}:

        set {_pl} to {back.players::%loop-index%}
        set {_k} to {back.karma::%{_pl}%}

        set title of {_pl}'s scoreboard to "&b&nBACKSTABBER"
        set line 10 of {_pl}'s scoreboard to ""
        set line 9 of {_pl}'s scoreboard to "&7Time:&r &l%{back.timer}% s"
        set line 8 of {_pl}'s scoreboard to "&7Role:&r &l%{back.%{_pl}%.role}%"
        set line 7 of {_pl}'s scoreboard to "&7Players:&r &l%size of {back.players::*}%/8"
        set line 6 of {_pl}'s scoreboard to "&7Karma:&r &l%{_k}%"
        if {back.traitors::*} contains {_pl}:
            set line 5 of {_pl}'s scoreboard to "&7Tokens:&r &l&d%{back.money.%{_pl}%}%"
        
on inventory click:
    if {back.players::*} contains player:
        cancel event
        if clicked slot is 13:
            # Saves chest contents to a varible
            if target block of player is a chest:
                set {_inv} to event-inventory's holder
                if {_inv} is a chest:
                    if item != air:
                        if {back.chestLocs::*} does not contain (location of {_inv}):
                            add location of {_inv} to {back.chestLocs::*}
                            add item to {back.chestItems::*}

                        set {_item} to item

                        if {back.ammo::*} contains item:
                            close player's inventory
                            remove item from event-inventory
                            set {_olditem} to slot 1 of player's inventory
                            if {_olditem} is not air:
                                set slot 13 of event-inventory to {_olditem}
                            set slot 1 of player's inventory to {_item}
                        else:
                            close player's inventory
                            remove item from event-inventory
                            set {_olditem} to slot 0 of player's inventory
                            if {_olditem} is not air:
                                set slot 13 of event-inventory to {_olditem}
                            set slot 0 of player's inventory to {_item}
        
        if {back.traitors::*} contains player:
            if event-inventory = (metadata tag "secretItems" of player):
                close player's inventory
                if {back.money.%player%} > 0:
                    if item is a compass:
                        if slot 3 of player's inventory is air:
                            set slot 3 of player's inventory to item
                            subtract 1 from {back.money.%player%}
                            updateBoard()
                            locate(player)
                        else:
                            send {@2compass} to player
                    else:
                        if slot 2 of player's inventory is air:
                            set slot 2 of player's inventory to item
                            subtract 1 from {back.money.%player%}
                            updateBoard()
                        else:
                            send {@2weapons} to player
                else:
                    send {@nomoney} to player

on rightclick on stone button:
    
    # Very long winded but simple way did not work
    if {back.players::*} contains player:
        if {back.traitors::*} does not contain player:
            cancel event
            send {@trapdeny}

on leftclick on stone button:
    
    if {back.players::*} contains player:
        if {back.traitors::*} contains player:
            cancel event
            {@fool}

function giveWeapon(p:player):

    give {_p} {back.weapons::*}

function noise(s: string, p: player):
    if {_s} is "start":
        loop {back.innocents::*}:
            set {_i} to {back.innocents::%loop-index%}
            play sound {@n-innocent} with volume 1000 and pitch 1 at {_i}'s location for {_i}
        loop {back.traitors::*}:
            set {_t} to {back.traitors::%loop-index%}
            play sound {@n-traitor} with volume 1000 and pitch 1 at {_t}'s location for {_t}
    if {_s} is "die":
        play sound {@n-die} with volume 1000 and pitch 2 at {_p}'s location for {_p}
    if {_s} is "win":
        loop {back.players::*}:
            play sound {@n-win} with volume 1000 and pitch 1 at loop-value's location for loop-value
    if {_s} is "join":
        play sound {@n-join} with volume 1000 and pitch 1 at {_p}'s location for {_p}
    if {_s} is "timer":
        loop {back.players::*}:
            play sound {@n-timer} with volume 1000 and pitch 1 at loop-value's location for loop-value
    if {_s} is "leave":
        play sound {@n-leave} with volume 1000 and pitch 1 at {_p}'s location for {_p}
    if {_s} is "map":
        play sound {@n-map} with volume 1000 and pitch 0 at {_p}'s location for {_p}
    if {_s} is "scan":
        play sound {@n-scan} with volume 1000 and pitch 1 at {_p}'s location for {_p}

function naughty(p:player):
    subtract 10 from {back.karma::%{_p}%}
    set action bar of {_p} to {@rdm}
    add {_p} to {back.naughty::*}
    if {back.karma::%{_p}%} <= 0:
        send {@kick} to {_p}
        leaveGame({_p})

command traitoradmin [<string>]:
    executable by: players
    usage: {@cmdusage}
    permission: traitor.admin
    permission message: {@noperm}
    aliases: ttadmin
    trigger:
        set {_w} to player's world
        if arg-1 = "addLocation":
            add player's location to {back.spawns::%{_w}%::*}
            send {@newlocation}
            if size of {back.spawns::%{_w}%::*} >= 8:
                send {@locationscomplete}
        else if arg-1 = "clearMapLocations":
            clear {back.spawns::%{_w}%::*}
            send {@clearlocations}
        else if arg-1 = "getWeapons":
            give player {back.weapons::*}
            give player {back.ammo::*}       
        else if arg-1 = "listLocations":
            send "&aLocations:"
            send "%{back.spawns::%{_w}%::*}%"
        else if arg-1 = "clearAllLocations":
            clear {back.spawns::*}


        else:
            send {@cmdusage}

command setKarma [<player>] [<integer>]:
    executable by: players and console
    usage: "/setKarma <player> <karma>"
    permission: traitor.karma
    trigger:
        set {back.karma::%arg-player%} to arg-2
        send "[&bbackstabber&f] &9sucessfully set &f%arg-player%'s &9karma to &f%arg-2%"

# Inv locking
on drop:
    if {back.players::*} contains player:
        cancel event

on swap hand items:
    if {back.players::*} contains player:
        cancel event

on rightclick on fence gate:
    if {back.players::*} contains player:
        cancel event

on rightclick on trapdoor:
    if {back.players::*} contains player:
        if player's world is not "Back-Egyptian":
            cancel event
        
# Chat
on chat:
    
    if {back.players::*} contains player:

        if {back.running} is true:
            if {back.innocents::*} does not contain player:
                if {back.traitors::*} does not contain player:
                    cancel event
                    {@dead}
                
command backstabber-chat [<string>]:
    executable by: players
    permission message: "&cPlease contact Nunghung immediately! Something has gone horrible wrong!"
    aliases: bchat
    trigger:
        if {back.traitors::*} contains player:
            send "[&cBackstabberChat&r] &7%player%:&r %arg-1%" to {back.traitors::*}
        else:
            send {@trapdeny}

# building
on block damage:
    if {back.players::*} contains player:
        cancel event
        
on block break:
    if {back.players::*} contains player:
        cancel event

on pick up:
    if {back.players::*} contains player:
        cancel event
        if {back.traitors::*} contains player:
            if item is trident:
                delete entity
                set slot 2 of player's inventory to item

# Traitor Menu
command backstabber-menu:
    aliases: bmenu
    trigger:
        if {back.traitors::*} contains player:
            openMenu(player)
        else:
            send {@trapdeny}    

on rightclick holding diamond:
    if {back.players::*} contains player:
        if {back.traitors::*} contains player:
            openMenu(player)
        else:
            send {@trapdeny}

function openMenu(p:player):
    set {_len} to size of {back.tw::*}
    set metadata tag "secretItems" of {_p} to chest inventory with 3 rows named "&nSecret Items"
    loop integers between 1 and {_len}:
        set {_i} to loop-integer + 9
        set {_w} to {back.tw::%loop-integer%}
        set slot {_i} of metadata tag "secretItems" of {_p} to {_w}
        open (metadata tag "secretItems" of {_p}) to {_p}

#Voting
function voteMenu(p:player):
    set metadata tag "vote" of {_p} to chest inventory with 6 rows named "Vote for map!"
    set {_castle} to dark prismarine named "&fCastle" with lore "&9by TomWoo & British8oys"
    set {_pyramid} to sand named "&fPyramid" with lore "&9by GabrielMeanTime & 1THELEG1"
    set {_depot} to rail named "&fDepot" with lore "&9by GabrielMeanTime & Purple9"
    set {_old} to mossy stone bricks named "&fApocalypse" with lore "&9by TomWoo"
    set {_hog} to brewing stand named "&fHogwarts" with lore "&9by Kiki325"
    set {_valley} to grass named "&fValley" with lore "&9by Kiki325"
    set {_none} to red concrete named "&cNone"
    set slot 12 of metadata tag "vote" of {_p} to {_castle}
    set slot 13 of metadata tag "vote" of {_p} to {_pyramid}
    set slot 14 of metadata tag "vote" of {_p} to {_depot}
    set slot 21 of metadata tag "vote" of {_p} to {_old}
    set slot 22 of metadata tag "vote" of {_p} to {_hog}
    set slot 23 of metadata tag "vote" of {_p} to {_valley}
    set slot 40 of metadata tag "vote" of {_p} to {_none}
    updateVote({_p})
    open (metadata tag "vote" of {_p}) to {_p}
    
function updateVote(p:player):
    set {_uu} to {_p}'s uuid
    set {_choice} to {back.map-vote::%{_uu}%}
    if {_choice} is set:
        loop items in (metadata tag "vote" of {_p}):
            set {_item} to loop-value
            set {_name} to name of {_item}
            remove all enchantments from {_item}
            set {_worldname} to {back.maps::%{_name}%}
            if {_choice} = {_worldname}:
                set loop-value to shiny {_item}
                set name of loop-value to "&b%{_name}%"

on inventory click:
    if event-inventory = (metadata tag "vote" of player):
        cancel event
        set {_map} to {back.maps::%uncolored name of item%}
        set {_uu} to player's uuid
        if {_map} is set:
            close player's inventory
            set {back.map-vote::%{_uu}%} to {_map}
            send "[&bbackstabber&f] You voted for &a%name of item%"
        if item is red concrete:
            close player's inventory
            delete {back.map-vote::%{_uu}%}
            send "[&bbackstabber&f] Your vote was &cremoved"

command backstabber-vote:
    aliases: bvote
    executable by: players
    trigger:
        voteMenu(player)

command backstabber-voteinfo:
    permission: traitor.info
    aliases: bvi
    trigger:
        loop {back.map-vote::*}:
            set {_voter} to loop-index parsed as player
            if {_voter} is online:
                send "%{_voter}%: %loop-value%"

function countVotes() :: string:
    if {back.map-vote::*} is not set:
        set {_temp::*} to {back.maps::*}
        set {_ind} to a random integer between 1 and (size of {back.maps::*})
        return {_temp::%{_ind}%}
    loop {back.map-vote::*}:
        set {_voter} to loop-index parsed as player
        if {_voter} is online:
            add 1 to {_vote::%loop-value%}
    loop {_vote::*}:
        if loop-value > {_h-vote}:
            clear {_h-map::*}
            set {_h-vote} to loop-value
        if loop-value = {_h-vote}:
            add loop-index to {_h-map::*}
        if {_h-vote} is not set:
            set {_h-vote} to loop-value
            add loop-index to {_h-map::*}
    set {_i} to a random integer between 1 and (size of {_h-map::*})
    return {_h-map::%{_i}%}

on quit:
    set {_uu} to player's uuid
    delete {back.map-vote::%{_uu}%}

# Scanner
function locate(p:player):
    loop {back.innocents::*}:
        if {_loc} is not set:
            set {_loc} to loop-value's location
        if (distance between {_p} and loop-value) < (distance between {_p} and {_loc}):
            set {_loc} to loop-value's location
    set action bar of {_p} to "&9-- SCANNING FOR NEARBY INNOCENTS --"
    noise("scan", {_p})
    set compass target of {_p} to {_loc}

every 10 seconds:
    loop {back.traitors::*}:
        if slot 3 of loop-value's inventory is a compass:
            locate(loop-value)

on damage:
    if {back.traitors::*} contains attacker:
        if attacker's tool is a diamond sword:
            kill victim
            add 1 to {back.stats.kills.%attacker%}

# Map reset
function loadChests():
    set {_chestLocs::*} to {back.chestLocs::*}
    set {_chestItems::*} to {back.chestItems::*}
    loop {_chestLocs::*}:
        set {_loc} to {_chestLocs::%loop-index%}
        set {_item} to {_chestItems::%loop-index%}
        set block at {_loc} to a chest
        set {_block} to block at {_loc}
        set slot 13 of {_block}'s inventory to {_item}
        remove {_item} from {back.chestItems::*}
        remove {_loc} from {back.chestLocs::*}

command backstabber-leave:
    executable by: players
    aliases: bleave
    trigger:
        if {back.players::*} contains player:
            leaveGame(player)
        else:
            send "[&bbackstabber&f] &cYou are not playing"

on rightclick holding blaze powder:
    if {back.traitors::*} contains player:
        set {_bl} to location of player's target block
        set {_loc} to location 1 above {_bl}
        remove item from player's inventory
        play sound {@n-beep} with volume 1 and pitch 2 at {_loc} for {back.players::*}
        wait 2 ticks
        play sound {@n-beep} with volume 1 and pitch 2 at {_loc} for {back.players::*}
        wait 2 ticks
        play sound {@n-beep} with volume 1 and pitch 2 at {_loc} for {back.players::*}
        wait 2 ticks
        play sound {@n-beep} with volume 1 and pitch 2 at {_loc} for {back.players::*}
        wait 2 ticks
        play sound {@n-beep} with volume 1 and pitch 2 at {_loc} for {back.players::*}
        wait 2 ticks
        play sound {@n-beep} with volume 1 and pitch 2 at {_loc} for {back.players::*}
        wait 2 ticks
        play sound {@n-beep} with volume 1 and pitch 2 at {_loc} for {back.players::*}
        wait 2 ticks
        play sound {@n-beep} with volume 1 and pitch 2 at {_loc} for {back.players::*}
        wait 2 ticks
        play sound {@n-beep} with volume 1 and pitch 2 at {_loc} for {back.players::*}
        wait 2 ticks
        play sound {@n-beep} with volume 1 and pitch 2 at {_loc} for {back.players::*}
        wait 2 ticks
        create a safe explosion of force 11 at {_loc}

command backstabber-stats:
    executable by: players
    aliases: bstats
    trigger:
        send ""
        send "&l&nBackstabber Statistics:"
        send ""
        send "Games Played: &r&a%{back.stats.games.%player%}%"
        send "Wins: &r&a%{back.stats.wins.%player%}%"
        send "Kills: &r&a%{back.stats.kills.%player%}%"
        send "Deaths: &r&a%{back.stats.deaths.%player%}%"
        if {back.stats.money.%player%} is not set:
            set {back.stats.money.%player%} to 0
        send "Money earnt: &r&aâ‚´%{back.stats.money.%player%}%"
        send ""

command backstabber-resetstats [<player>]:
    executable by: players
    permission: traitor.statadmin
    trigger:
        delete {back.stats.games.%arg-player%}
        delete {back.stats.wins.%arg-player%}
        delete {back.stats.kills.%arg-player%}
        delete {back.stats.deaths.%arg-player%}
        set {back.stats.money.%arg-player%} to 0
        send "Reset %arg-player%'s stats"

# HALFBUG - if traitor leaves, game is pointless

# TODO inform all on join

# TODO player bodies (last damage cause in tuske)
# TODO C4 TNT

# TODO traitor tester

# TODO Tablist says whether alive/dead
# TODO increase limit